@page "/huoltokohteet"
@using SharedLib
@inject HttpClient Http
@*@attribute [Authorize]*@

<PageTitle>Huoltokohteet</PageTitle>

<h1>Huoltokohteet</h1>



<button style="margin: 2em 0 2em 0" class="btn btn-primary" @onclick="@ShowUusiKohde">Lisää uusi huoltokohde</button>
    <br />

@if (filtered == null && tilat == null && kohdelist == null && kohteet == null)
{
    <p>ladataan....</p>
}
else
{
    <div>
        <input @bind-value="SearchTextNimi" @bind-value:event="oninput" placeholder="Suodata nimen mukaan" />
        <input @bind-value="SearchTextMalli" @bind-value:event="oninput" placeholder="Suodata mallin mukaan" />
        <input @bind-value="SearchTextTunnus" @bind-value:event="oninput" placeholder="Suodata tunnuksen mukaan" />
    </div>


    <div style="margin: 1em 0 1em 0">
    <label>Suodata kohteen tilan mukaan:</label>
        <button class="btn btn-success" @onclick="Filter1">Käytössä</button>
        <button class="btn btn-danger" @onclick="Filter2">Epäkunnossa</button>
        <AuthorizeView Roles="admin">
            <button class="btn btn-secondary" @onclick="Filter3">Poistettu</button>
        </AuthorizeView>
    </div>

    <div style="margin: 1em 0 1em 0">
        <label>Suodata kohteen sijainnin mukaan:</label>
            @foreach (var item in Sijainnit)
            {
                <input id="sijainnit" type="checkbox"  @onchange="args=>Suodata1(args, item)" style="margin-left: 0.5em" />
                @item
               
            }

        <button style="margin-left: 0.5em" class="btn btn-info" @onclick="Filter4"><span class="oi oi-magnifying-glass"></span></button>
    </div>
    <div style="margin: 1em 0 1em 0">
        <label>Suodata kohteen tyypin mukaan:</label>
        @foreach (var item in Tyypit)
        {
            <input id="tyypit" type="checkbox" @onchange="args=>Suodata2(args, item)" style="margin-left: 0.5em" />
            @item

        }
        <button style="margin-left: 0.5em" class="btn btn-info" @onclick="Filter5"><span class="oi oi-magnifying-glass"></span></button>
    </div>

    <div style="margin: 1em 0 1em 0">
    <button class="btn btn-info" @onclick="OnInitializedAsync"><span class="oi oi-reload"></span></button>
    </div>
    
}




@if (filtered == null && tilat == null && kohdelist == null && kohteet == null)
{
    <p><em>ladataan...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th><button @onclick="SortById">ID</button></th>
                <th>Nimi</th>
                <th>Kuvaus</th>
                <th><button @onclick="SortBySijainti">Sijainti</button></th>
                <th><button @onclick="SortByTyyppi">Tyyppi</button></th>
                <th>Malli</th>
                <th>Tunnus</th>
                <th><button @onclick="SortByTila">Tila</button></th>
                <th><button @onclick="SortByLuotu">Luotu</button></th>
                <th><button @onclick="SortByLuoja">Luoja</button></th>
                <th><button @onclick="SortByKohderyhma">Kohderyhmä</button></th>
                <th>Muokkaa</th>
                <th>Muutoshistoria</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var a in filtered)
            {
                <tr>
                    <td>@a.Idkohde</td>
                    <td>@a.Nimi</td>
                    <td>@a.Kuvaus</td>
                    <td>@a.Sijainti</td>
                    <td>@a.Tyyppi</td>
                    <td>@a.Malli</td>
                    <td>@a.Tunnus</td>
                    <td>
                        @if (a.IdkohteenTila == 1)
                        {
                            <span style="color: green">@tilat.Find(x => x.IdkohteenTila == a.IdkohteenTila).Kuvaus</span>
                        }
                        else if (a.IdkohteenTila == 2)
                        {
                            <span style="color: red">@tilat.Find(x => x.IdkohteenTila == a.IdkohteenTila).Kuvaus</span>
                        }
                        else
                        {
                            <span style="color: black">@tilat.Find(x => x.IdkohteenTila == a.IdkohteenTila).Kuvaus</span>
                        }

                        </td>
                    <td>@a.Luotu</td>
                    <td>@a.Idkayttaja</td>
                    <td>@a.Idkohderyhma</td>
                    <td><button style="font-size: 85%" class="btn btn-success" @onclick="@(e => Edit(a.Idkohde))"><span class="oi oi-pencil"></span></button></td>
                    <td><button style="font-size: 85%" class="btn btn-success" @onclick="@(e => History(a.Idkohde))"><span class="oi oi-menu"></span></button></td>

                </tr>
            }
        </tbody>
    </table>
}

@code {

    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    public string SearchTextNimi = "";
    public string SearchTextMalli = "";
    public string SearchTextTunnus = "";
    public IEnumerable<HuoltokohdeDTO>? kohdelist { get; set; } = new List<HuoltokohdeDTO>();

    private HuoltokohdeDTO[]? kohteet;
    private List<TilaDTO>? tilat;

    private List<HuoltokohdeDTO>? huoltokohteet;
    private List<HuoltokohdeDTO>? filtteroimaton;

    private int[]? kohdes;

    int tila;


    private List<string> Sijainnit = new List<string> { "Varasto", "Sorvaamo", "Halli 1", "Halli 2", "Paja", "Huoltamo"};
    private List<string> valitutsijainnit = new List<string>();

    private List<string> Tyypit = new List<string> { "sorvi", "pesuri", "imuri", "työstäjä", "työkalu", "muu laite" };
    private List<string> valituttyypit = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        kohdelist = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/all/tila1or2");
        tilat = await Http.GetFromJsonAsync<List<TilaDTO>>("/tila/all");

    }

    List<HuoltokohdeDTO> filtered => kohdelist.Where(a => a.Nimi.ToLower().Contains(SearchTextNimi.ToLower()))
    .Where(a => a.Malli.ToLower().Contains(SearchTextMalli.ToLower()))
    .Where(a => a.Tunnus.ToLower().Contains(SearchTextTunnus.ToLower())).ToList();

    private async Task Suodata1(ChangeEventArgs args, string item)
    {
        
        bool SijaintiSelected = (bool)args.Value;
        if (SijaintiSelected) valitutsijainnit.Add(item);
        else valitutsijainnit.Remove(item);

    }

    private async Task Suodata2(ChangeEventArgs args, string item)
    {
        bool TyyppiSelected = (bool)args.Value;
        if (TyyppiSelected) valituttyypit.Add(item);
        else valituttyypit.Remove(item);

    }



    private async Task ShowUusiKohde()
    {
        var uusiModal = Modal.Show<UusiKohde>("Uusi huoltokohde");
        var result = await uusiModal.Result;
        kohteet = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/all/tila1or2");
    }

    private async Task Edit(int Id)
    {
        var parameters = new ModalParameters()
        .Add(nameof(EditKohde.Id), Id);

        var editModal = Modal.Show<EditKohde>("Kohde", parameters);
        var result = await editModal.Result;

        kohteet = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/all/tila1or2");
    }

    private async Task History(int Id)
    {
        var parameters = new ModalParameters()
        .Add(nameof(HistoryKohde.Id), Id);

        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };


        var historyModal = Modal.Show<HistoryKohde>("Muutoshistoria", parameters, options);
        var result = await historyModal.Result;

        kohteet = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/all/tila1or2");
    }




    private async Task SortBySijainti()
    {
        kohdelist = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/sortbysijainti");

    }

    private async Task SortById()
    {
        kohdelist = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/all/tila1or2");

    }

    private async Task SortByTyyppi()
    {
        kohdelist = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/sortbytyyppi");

    }

    private async Task SortByTila()
    {
        kohdelist = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/sortbytila");

    }

    private async Task SortByLuotu()
    {
        kohdelist = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/sortbyluotu");

    }

    private async Task SortByLuoja()
    {
        kohdelist = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/sortbyluoja");

    }

    private async Task SortByKohderyhma()
    {
        kohdelist = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/sortbykohderyhma");

    }

    private async Task Filter1()
    {
        kohdelist = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/filterbykaytossa");

    }

    private async Task Filter2()
    {
        kohdelist = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/filterbyepakunnossa");

    }
    private async Task Filter3()
    {
        kohdelist = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/filterbypoistettu");

    }

    private async Task Filter4()
    {
        Console.WriteLine(valitutsijainnit);

    }

    private async Task Filter5()
    {
        Console.WriteLine(valituttyypit);

    }
}
