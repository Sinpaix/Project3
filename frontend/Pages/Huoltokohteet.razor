@page "/huoltokohteet"
@using SharedLib
@inject HttpClient Http
@*@attribute [Authorize]*@

<h3>Huoltokohteet</h3>



<button style="margin: 2em 0 2em 0" class="btn btn-primary" @onclick="@ShowUusiKohde">Lisää uusi huoltokohde</button>
    <br />

@if (tilat == null)
{
    
}
else
{
    <div style="margin: 1em 0 1em 0">
    <label>Filter By Tila:</label>
    <button @onclick="Filter1">Käytössä</button>
    <button @onclick="Filter2">Epäkunnossa</button>
    <button @onclick="Filter3">Poistettu</button>
    </div>
    
}


@if (kohteet == null)
{
    <p><em>ladataan...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th><button @onclick="SortById">ID</button></th>
                <th>Nimi</th>
                <th>Kuvaus</th>
                <th><button @onclick="SortBySijainti">Sijainti</button></th>
                <th><button @onclick="SortByTyyppi">Tyyppi</button></th>
                <th>Malli</th>
                <th>Tunnus</th>
                <th><button @onclick="SortByTila">Tila</button></th>
                <th><button @onclick="SortByLuotu">Luotu</button></th>
                <th><button @onclick="SortByLuoja">Luoja</button></th>
                <th><button @onclick="SortByKohderyhma">Kohderyhmä</button></th>
                <th>Muokkaa</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var a in kohteet)
            {
                <tr>
                    <td>@a.Idkohde</td>
                    <td>@a.Nimi</td>
                    <td>@a.Kuvaus</td>
                    <td>@a.Sijainti</td>
                    <td>@a.Tyyppi</td>
                    <td>@a.Malli</td>
                    <td>@a.Tunnus</td>
                    <td>@a.IdkohteenTila</td>
                    <td>@a.Luotu</td>
                    <td>@a.Idkayttaja</td>
                    <td>@a.Idkohderyhma</td>
                    <td><button style="font-size: 85%" class="btn btn-success" @onclick="@(e => Edit(a.Idkohde))"><span class="oi oi-pencil"></span></button></td>

                </tr>
            }
        </tbody>
    </table>
}

@code {

    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    private HuoltokohdeDTO[]? kohteet;
    private List<TilaDTO>? tilat;

    int tila;

    protected override async Task OnInitializedAsync()
    {
        kohteet = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/all");
        tilat = await Http.GetFromJsonAsync<List<TilaDTO>>("/tila/all");
    }

    private async Task ShowUusiKohde()
    {
        var uusiModal = Modal.Show<UusiKohde>("Uusi huoltokohde");
        var result = await uusiModal.Result;
        kohteet = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/all");
    }

    private async Task Edit(int Id)
    {
        var parameters = new ModalParameters()
        .Add(nameof(EditKohde.Id), Id);

        var editModal = Modal.Show<EditKohde>("Kohde", parameters);
        var result = await editModal.Result;

        kohteet = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/all");
    }

    

    private async Task SortBySijainti()
    {
        kohteet = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/sortbysijainti");

    }

    private async Task SortById()
    {
        kohteet = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/all");

    }

    private async Task SortByTyyppi()
    {
        kohteet = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/sortbytyyppi");

    }

    private async Task SortByTila()
    {
        kohteet = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/sortbytila");

    }

    private async Task SortByLuotu()
    {
        kohteet = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/sortbyluotu");

    }

    private async Task SortByLuoja()
    {
        kohteet = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/sortbyluoja");

    }

    private async Task SortByKohderyhma()
    {
        kohteet = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/sortbykohderyhma");

    }

    private async Task Filter1()
    {
        kohteet = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/filterbykaytossa");

    }

    private async Task Filter2()
    {
        kohteet = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/filterbyepakunnossa");

    }
    private async Task Filter3()
    {
        kohteet = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/filterbypoistettu");

    }
}
