@page "/auditointi"
@using SharedLib
@inject HttpClient Http
@inject IModalService ModalService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Auditointi</PageTitle>

<h1 class="mb-4">Auditointi</h1>

<div class="mb-5">
	<button class="btn btn-success" @onclick="Start">Aloita uusi auditointi</button>
	<button class="btn btn-primary" @onclick="Auditointipohjat">Auditointipohjat</button>
</div>

<hr />

<h2 class="mb-3">Suoritetut auditoinnit</h2>
<button class="btn btn-secondary" @onclick="TyhjennaFilter">Tyhjennä suodattimet</button>

@if (auditoinnit != null)
{
	<table class="table table-striped">
		<thead>
			<tr>
				<th>ID</th>
				<th>Selite</th>
				<th>Päivämäärä</th>
				<th style="cursor:pointer" @onclick="filterKayttaja">
                    Tekijä
                    @if (tekija is null || tekija.Length == 0)
                    {<i class="fa-solid fa-filter-circle-xmark"></i>}
                    else
                    {<i class="fa-solid fa-filter"></i>}
                </th>
				<th style="cursor:pointer" @onclick="filterKohde">Kohde
                @if (kohteet is null || kohteet.Length == 0) {<i class="fa-solid fa-filter-circle-xmark"></i>}
                else {<i class="fa-solid fa-filter"></i>}
                </th>
				<th style="cursor:pointer" @onclick="filterLopputulos">Lopputulos
                @if (lopputulokset is null || lopputulokset.Length == 0) {<i class="fa-solid fa-filter-circle-xmark"></i>}
                else {<i class="fa-solid fa-filter"></i>}
                </th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in auditoinnit)
			{
				<tr>
					<td>@item.Idauditointi</td>
					<td>@item.Selite</td>
					<td>@item.Luotu.ToString("dd.MM.yyyy HH:mm")</td>
					<td>@item.KayttajaNimi</td>
					<td>@item.KohdeNimi</td>
					<td>
						@if (item.Lopputulos == 1)
						{
							<span style="color: green">hyväksytty</span>
						}
						else
						{
							<span style="color: red">hylätty</span>
						}
						
					</td>
				</tr>
			}

		</tbody>
	</table>
}
else
{
	<div class="text-center">
		<div class="spinner-border text-primary" role="status">
			<span class="visually-hidden">Loading...</span>
		</div>
	</div>
}





@code {
    private List<AuditointiDTO>? auditoinnit;
    private List<AuditointiDTO>? filtteroimaton;
    private int[]? kohteet;
    private int[]? tekija;
    private int[]? lopputulokset;

    protected override async Task OnInitializedAsync()
    {
        auditoinnit = await Http.GetFromJsonAsync<List<AuditointiDTO>>("/auditointi/all");
        filtteroimaton = auditoinnit;
    }

    private void Auditointipohjat()
    {
        NavigationManager.NavigateTo("/auditointipohjat");
    }


    async Task Start()
    {
        var auditModal = ModalService.Show<StartAudit>("Auditointi");
        var result = await auditModal.Result;

        await OnInitializedAsync();
    }

    private async Task filterKohde()
    {
        var parameters = new ModalParameters()
            .Add(nameof(FilterKohde.valitutId), kohteet);


        var filterModal = ModalService.Show<FilterKohde>("Valitse kohteet", parameters);
        var result = await filterModal.Result;

        if (result.Confirmed && result.Data != null)
        {
            kohteet = (int[])result.Data;
        }

        Filter();

    }

    private async Task filterKayttaja()
    {
        var parameters = new ModalParameters()
            .Add(nameof(FilterKayttaja.valitutId), tekija);


        var filterModal = ModalService.Show<FilterKayttaja>("Valitse käyttäjät", parameters);
        var result = await filterModal.Result;

        if (result.Confirmed && result.Data != null)
        {
            tekija = (int[])result.Data;
        }

        Filter();
    }

    private async Task filterLopputulos()
    {
        var parameters = new ModalParameters()
            .Add(nameof(FilterLopputulos.valitutId), lopputulokset);


        var filterModal = ModalService.Show<FilterLopputulos>("Valitse näytettävät", parameters);
        var result = await filterModal.Result;

        if (result.Confirmed && result.Data != null)
        {
            lopputulokset = (int[])result.Data;
        }

        Filter();
    }

    private void Filter()
    {
        auditoinnit = filtteroimaton;

        if (lopputulokset != null && lopputulokset.Length != 0)
        {

            if (auditoinnit != null) auditoinnit = auditoinnit.FindAll(x => lopputulokset.Contains((int)x.Lopputulos));
        }

        if (tekija != null && tekija.Length != 0)
        {

            if (auditoinnit != null) auditoinnit = auditoinnit.FindAll(x => tekija.Contains(x.Idkayttaja));
        }

        if (kohteet != null && kohteet.Length != 0)
        {

            if (auditoinnit != null) auditoinnit = auditoinnit.FindAll(x => kohteet.Contains(x.Idkohde));
        }
    }

    private void TyhjennaFilter()
    {
        auditoinnit = filtteroimaton;
        tekija = null;
        kohteet = null;
        lopputulokset = null;
    }

}
