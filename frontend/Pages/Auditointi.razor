@page "/auditointi"
@using SharedLib
@inject HttpClient Http
@inject IModalService ModalService
@inject NavigationManager NavigationManager

<h3 class="mb-4">Auditointi</h3>

<h4>Menneet auditoinnit</h4>

@if (auditoinnit != null)
{
	<table class="table table-striped">
		<thead>
			<tr>
				<th>ID</th>
				<th>Selite</th>
				<th>Päivämäärä</th>
				<th>Tekijä</th>
				<th>Kohde</th>
				<th>Lopputulos</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in auditoinnit)
			{
				<tr>
					<td>@item.Idauditointi</td>
					<td>@item.Selite</td>
					<td>@item.Luotu.ToString("dd.MM.yyyy HH:mm")</td>
					<td>@item.Idkayttaja</td>
					<td>@item.Idkohde</td>
					<td>@item.Lopputulos</td>
				</tr>
			}

		</tbody>
	</table>
}
else
{
	<p>ladataan dataa..</p>
}



<button class="btn btn-primary" @onclick="Auditointipohjat">Auditointipohjat</button>
<button class="btn btn-secondary" @onclick="Vaatimukset">Vaatimuspohjat</button>

@code {
	AuditointiDTO[]? auditoinnit;

	protected override async Task OnInitializedAsync()
	{
		auditoinnit = await Http.GetFromJsonAsync<AuditointiDTO[]>("/auditointi/all");
	}

	async Task Auditointipohjat()
	{
		var uusiModal = ModalService.Show<Auditointipohjat>("Auditointipohjat");
		var result = await uusiModal.Result;
	}

	private void Vaatimukset()
	{
		NavigationManager.NavigateTo("/vaatimukset");
	}



}
