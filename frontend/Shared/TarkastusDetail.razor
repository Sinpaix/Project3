@using SharedLib
@inject HttpClient Http

@if (tarkastus != null && tila != null && aikaleima != null)
{
    <EditForm Model="tarkastus" OnValidSubmit="Sulje">

        <div class="mb-3">
            <label for="id">Tarkastuksen Id</label>
            <InputNumber id="id" @bind-Value="tarkastus.Idtarkastus" class="form-control" Disabled />
        </div>

        <div class="mb-3">
            <label for="aikaleima">Tarkastus suoritettu</label>
            <InputText id="aikaleima" @bind-Value="aikaleima" class="form-control" Disabled />
        </div>

        <div class="mb-3">
            <label for="kayttajaNimi">Tarkastuksen tekijä</label>
            <InputText id="kayttajaNimi" @bind-Value="tarkastus.KayttajanNimi" class="form-control" Disabled />
        </div>

        <div class="mb-3">
            <label for="kohde">Kohde</label>
            <InputText id="kohde" @bind-Value="tarkastus.KohteenNimi" class="form-control" Disabled />
        </div>

        <div class="mb-3">
            <label for="syy">Tarkastuksen syy</label>
            <InputText id="syy" @bind-Value="tarkastus.Syy" class="form-control" Disabled />
        </div>

        <div class="mb-3">
            <label for="havainnot">Havainnot</label>
            <InputText id="havainnot" @bind-Value="tarkastus.Havainnot" class="form-control" Disabled />
        </div>

        <div class="mb-3">
            <label for="tilanMuunnos">Tilan muutos</label>
            <InputText id="tilanMuunnos" @bind-Value="tila" class="form-control" Disabled />
        </div>



        <button type="submit" class="btn btn-primary">Sulje</button>
    </EditForm>
}




@code {
    [CascadingParameter] BlazoredModalInstance Modal { get; set; } = default!;

    private TarkastusDTO? tarkastus = new TarkastusDTO();
    private List<TilaDTO>? tilat;
    private string? tila;
    private string? aikaleima;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        tilat = await Http.GetFromJsonAsync<List<TilaDTO>>("/tila/all");
        tilat.Add(new TilaDTO { IdkohteenTila = 0, Kuvaus = "ei muutosta" });
        tarkastus = await Http.GetFromJsonAsync<TarkastusDTO>($"/tarkastus/{Id}");

        if (tarkastus != null)
        {
            tila = tilat.Find(x => x.IdkohteenTila == tarkastus.TilanMuutos).Kuvaus;
            aikaleima = tarkastus.Aikaleima.ToString("dd.MM.yyyy HH:mm");
        }

    }


    private async Task Sulje()
    {
        await Modal.CloseAsync();
    }

}

