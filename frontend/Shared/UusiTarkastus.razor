@using SharedLib
@inject HttpClient Http

@if (kohteet != null && tilat != null)
{
    <EditForm Model="tarkastus" OnValidSubmit="Tallenna">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label for="kohde">Kohde</label>
            <InputSelect id="kohde" @bind-Value="tarkastus.Idkohde" class="form-control">
                @foreach (var item in kohteet)
                {
                    <option value="@item.Idkohde">@item.Nimi, @item.Sijainti</option>
                }
            </InputSelect>
            <ValidationMessage For="()=>tarkastus.Idkohde" />
        </div>

        <div class="mb-3">
            <label for="syy">Tarkastuksen syy</label>
            <InputText id="syy" @bind-Value="tarkastus.Syy" class="form-control" />
            <ValidationMessage For="()=>tarkastus.Syy" />
        </div>

        <div class="mb-3">
            <label for="havainnot">Havainnot</label>
            <InputText id="havainnot" @bind-Value="tarkastus.Havainnot" class="form-control" />
            <ValidationMessage For="()=>tarkastus.Havainnot" />
        </div>

        <div class="mb-3">
            <label for="tilanmuunnos">Kohteen tila:</label> <br />
            <InputRadioGroup id="tilanmuunnos" @bind-Value="tarkastus.TilanMuutos" class="form-control">
                @for (int i = 0; i < 4; i++)
                {
                    <label for="radio">@tilat.Find(x => x.IdkohteenTila == i).Kuvaus</label>
                    <InputRadio id="radio" Value="@i" /> <br />
                }
            </InputRadioGroup>
            <ValidationMessage For="()=>tarkastus.TilanMuutos" />
        </div>

        <button type="submit" class="btn btn-primary">Tallenna</button>
        <button type="reset" @onclick="Tyhjenna" class="btn btn-secondary">Tyhjenna</button>
    </EditForm>
}




@code {
    [CascadingParameter] BlazoredModalInstance Modal { get; set; } = default!;

    private TarkastusDTO tarkastus = new TarkastusDTO();
    private HuoltokohdeDTO[]? kohteet;

    private List<TilaDTO>? tilat;

    protected override async Task OnInitializedAsync()
    {
        tilat = await Http.GetFromJsonAsync<List<TilaDTO>>("/tila/all");
        tilat.Add(new TilaDTO { IdkohteenTila = 0, Kuvaus = "ei muutosta" });
        kohteet = await Http.GetFromJsonAsync<HuoltokohdeDTO[]>("/kohde/all");
    }


    private async Task Tallenna()
    {
        tarkastus.Aikaleima = DateTime.Now;

        await Http.PostAsJsonAsync<TarkastusDTO>("/tarkastus", tarkastus);

        await Modal.CloseAsync();
    }

    private void Tyhjenna()
    {
        tarkastus = new TarkastusDTO();
    }

}

