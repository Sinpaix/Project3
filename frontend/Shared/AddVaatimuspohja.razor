@using SharedLib
@inject HttpClient Http
@inject IModalService ModalService
@inject NavigationManager NavigationManager

<EditForm Model="v">
	<div class="mb-3">
		<label for="kuvaus">Kuvaus</label>
		<InputText id="kuvaus" @bind-Value="v.Kuvaus" class="form-control" />
	</div>

	<div class="mb-3">
		<label for="selite">Pakollisuus</label>
		<InputText id="selite" @bind-Value="v.Pakollisuus" class="form-control" />
	</div>

	<div class="mb-3">
		<label for="auditointipohja">Auditointipohja</label>
		<InputSelect id="auditointipohja" @bind-Value="v.Idauditointipohja" class="form-control">
			@if (auditointipohjat != null)
			{
				@foreach (var item in auditointipohjat)
				{
					<option value="@item.Idauditointipohja">@item.Selite</option>
				}
			}

		</InputSelect>
	</div>

	<button class="btn btn-primary" @onclick="Save">Tallenna</button>
	<button class="btn btn-secondary" @onclick="Close">Peruuta</button>
</EditForm>




@code {
	[CascadingParameter] BlazoredModalInstance Modal { get; set; } = default!;
	VaatimuspohjaDTO v = new();
	VaatimuspohjaDTO kopio = new();
	AuditointipohjaDTO[]? auditointipohjat;
	private string sort = "sort";

	[Parameter]
	public int? Id { get; set; }

	protected override async Task OnInitializedAsync()
	{
		auditointipohjat = await Http.GetFromJsonAsync<AuditointipohjaDTO[]>($"/auditointipohja/all/{sort}");

		if(Id != null)
		{
			kopio = await Http.GetFromJsonAsync<VaatimuspohjaDTO>($"/vaatimuspohja/{Id}");

			v.Kuvaus = kopio.Kuvaus;
			v.Pakollisuus = kopio.Pakollisuus;
			v.Idauditointipohja = kopio.Idauditointipohja;
		}
	}

	async Task Close()
	{
		await Modal.CloseAsync();
	}

	async Task Save()
	{
		var result = await Http.PostAsJsonAsync<VaatimuspohjaDTO>("/vaatimuspohja/add", v);
		await Close();

	}

}
